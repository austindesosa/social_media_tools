# -*- coding: utf-8 -*-
"""aws_tool.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AovUDL7ZYJcRdOLjc9-NgnYCteqNqB09

This file intends to experiment with AWS services, and will include methods to work with the AWS boto3 SDK
"""

import os
import glob
import json
import pandas as pd
import numpy as np
from datetime import datetime
from time import time
import skimage.io as skio
#os.system('pip install instaloader')
#os.system('pip install boto3')
import boto3

#The folowing string has been used as a script for EC2 instances in my AWS course
LINUX_STRING = '''#!/bin/bash
yum install -y httpd mysql
amazon-linux-extras install -y php7.2
wget https://us-west-2-tcprod.s3.amazonaws.com/course/ILT-TF-200-ARCHIT/v6.8.12/lab-2-webapp/scripts/inventory-app.zip
unzip inventory-app.zip -d /var/www/html/
wget https://github.com/aws/aws-sdk-php/releases/download/3.62.3/aws.zip
unzip aws.zip -d /var/www/html/
chkconfig httpd on
service httpd start
'''

REGION = 'us-west-2'
AMI_ID = 'ami-07a0da1997b55b23e'
INSTANCE_TYPE = 't2.micro'

def iam_credentials(csv_name = 'new_user_credentials.csv', dxry=None):
  '''Gets IAM credentials from a CSV file as provided by AWS for that purpose,
  returns tuple containing (username, dictionary of credentials)
  csv_name : string, name of CSV file
  dxry : Dictionary or NoneType, optional dictionary to add return value to
  Returns
  key : string, name of IAM user, 
  val : dictionary, contains access key ID and secret access key for that IAM user
  Also adds key-value pair (key, val) to dictionary dxry'''
  daf = pd.read_csv(csv_name)
  key = daf['User name'][0]
  val = {}
  val['access_key_id'] = daf['Access key ID'][0]
  val['secret_access_key'] = daf['Secret access key'][0]
  if dxry:
    dxry[key]=val
  return key, val