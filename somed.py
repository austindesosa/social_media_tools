# -*- coding: utf-8 -*-
"""somed.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17GBVUOWNMtJkroew-Qb_2dewODTXW3qD

This file aims to interface with social media, particularly by fetching images from Instagram. There are also functions to fetch from other popular social media, and for image processing.
"""

import requests
import skimage.io as skio
import numpy as np
import json
import os
import glob
import torch
import torchvision
import tensorflow as tf
from tensorflow import keras
from IPython.display import Audio
from moviepy.editor import *
os.system("pip install instaloader")

#Dictionary containing popular social media wbsites
URLS = {'ig': 'https://www.instagram.com',
        'tiktok':'https://www.tiktok.com',
        'snap':'https://www.snapchat.com',
        'fb':'https://www.facebook.com',
        'wiki':'https://www.wikipedia.org',
        'twitter':'https://www.twitter.com',
        'github':'https://www.github.com',
        'linkedin':'https://www.linkedin.com',
        'youtube':'https://www.youtube.com',
        'instagram':'https://www.instagram.com',
        'facebook':'https://www.facebook.com'
        }

def ig_videos(un,
              head='/content',
              ext='mp4') -> list :
              s=f'{head}/{un}/*.{ext}'
              v=glob.glob(s)
              y=[VideoFileClip(x) for x in v]
              return y

def fetch_profile(dict_key, username) -> requests.Response:
  '''Sends GET request for someone's social media profile
  and returns response.
  dict_key : string, key in the URLS dictionary 
             representing which social media platform the profile is on
  username : string, username of the profile you want to access'''
  req = requests.get(f"{URLS[dict_key]}/{username}")
  return req

imread = np.vectorize(skio.imread)


def download_ig(un) -> None:
  '''Downloads a person's entire Instagram profile
  un : string, Instagram username you wish to download'''
  os.system(f"instaloader {un} --no-compress-json")
  print(f"Files downloaded from Instagram profile {un}")

def ig_photos(un,
              head='/content',
              ext='jpg') -> list:
  '''Returns list of numpy arrays representing photos downloaded from someones Instagram
  un : string, Instagram username of already-uploaded IG profile
  head : string, beginning of filepath names in your directory
  ext : string, filename extension for desired files'''
  s=f"{head}/{un}/*.{ext}"
  v=glob.glob(s)
  y=[skio.imread(x) for x in v]
  return y 

def download_ig_photos(un,
                       head = "/content",
                       ext="jpg"):
  '''Downloads a persons Instagram profile, and returns list of all their photos
  as numpy arrays
  un : string, Instagram username of profile you want to download
  head : string, beginning of filepath names for your directory
  ext : string, extension of desired files, jpg by default'''
  download_ig(un)
  return ig_photos(un,head,ext)

def git_clone(un, project) -> int:
  '''Clones a project from GitHub, and returns exit code from os.system
  un : string, GitHub username whose project you want to download
  project : string, name of project you want to clone'''
  cmd = f"git clone {URLS['github']}/{un}/{project}"
  print(cmd)
  return os.system(cmd)

def model_from_json(fname) -> tf.keras.Model :
  '''Returns tf.keras.Model object based on JSON file <fname>
  fname : String, filename in this directory ending in .json
  '''
  ret = None
  with open(fname) as f:
    ret = tf.keras.models.model_from_json(f.read())
  return ret

def prep_image_tensor(x, new_type = np.float32) -> np.ndarray:
  '''Converts data type of np.uint8 array, and scales it so all values are between 0 and 1
  x : numpy ndarray to be converted
  new_type : data type for the new version of x
  Returns numpy array x after changing data type and normalizing it to values between 0.0 and 1.0'''
  if x.dtype == np.uint8:
    x = x.astype(new_type)
    x /= 255.0
  return x

def mp4_soundfile(mp4, name, ext='mp3') -> None :
  '''Extracts a .wav or .mp3 file (sound) from a .mp4 file (video),
  and puts it in the directory
  mp4 : string, name of the .mp4 file, INCLUDING .mp4 extension
  name : string, name of sound file EITHOUT the extension
  ext : string, extension of sound file, either 'mp3' or 'wav'
  '''
  with VideoFileClip(mp4) as vfc:
    vfc.audio.write_audiofile(f'{name}.{ext}')